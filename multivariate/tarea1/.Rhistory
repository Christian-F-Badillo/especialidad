}
N <- nrow(data)
if(is.null(n)){n <- N*0.1}
mean.est <- numeric(iter)
var.est <- numeric(iter)
lower.ci <- numeric(iter)
upper.ci <- numeric(iter)
set.seed(seed)
for(i in 1:iter){
sample <- sample(edad.data$edad, n)
mean.est[i] <- mean(sample)
var.est[i] <- (1 - n/N) * (var(sample)/n)
lower.ci[i] <- mean.est[i] - qnorm(1 - alpha/2) * sqrt(var.est[i])
upper.ci[i] <- mean.est[i] + qnorm(1 - alpha/2) * sqrt(var.est[i])
}
return(data.frame(mean.est, lower.ci, upper.ci))
}
plot_ic <- function(df=NULL, mean.est.col = "green", ci_color = "blue", real_col = "red")
{
if(is.null(data))
{
stop("No se ha proporcionado un conjunto de datos.")
}
ggplot(df, aes(x = 1:iter, y = mean.est)) +
geom_point(colour = mean.est.col) +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = 0.1,
colour = ci_color) +
geom_hline(yintercept = mean(edad.data$edad), color = real_col) +
labs(title = "Intervalos de Confianza para la Media de la Edad",
x = "Iteración",
y = "Media") +
theme_minimal()
}
N <- nrow(edad.data)
n <- 20
iter <- 100
seed <- 1
df <- ic_estimation(edad.data, n, iter, seed)
#| label: fig:ic_n20
#| fig-cap: "IC al 95% para la media de la edad con tamaño de muestra 20."
colors <- c("#1E1E1E", "#4D6291", "#9C0824")
plot_ic(df, colors[1], colors[2], colors[3])
n <- 50
seed <- 2
iter <- 100
df <- ic_estimation(data = data, n = n, iter = iter, seed = seed)
#| label: fig:ic_n50
#| fig-cap: "IC al 95% para la media de la edad con tamaño de muestra 50."
colors <- c("#1E1E1E", "#4D6291", "#9C0824")
plot_ic(df, colors[1], colors[2], colors[3])
#| echo=T, show=T, eval=T, output=F
library(ggplot2)
library(dplyr)
library(knitr)
setwd(dir = "~/Escritorio/especialidad_codes/sampling/tarea1 /")
edad.data <- read.csv("edad.csv")
set.seed(1)
#| echo=T, show=T, eval=T, output=T
knitr::kable(head(edad.data), caption = "Datos.")
#| echo=T, show=T, eval=T, output=F
ic_estimation <- function(data = NULL, n=NULL, iter=1000, alpha = 0.05, seed = 1)
{
if(is.null(data))
{
stop("No se ha proporcionado un conjunto de datos.")
}
N <- nrow(data)
if(is.null(n)){n <- N*0.1}
mean.est <- numeric(iter)
var.est <- numeric(iter)
lower.ci <- numeric(iter)
upper.ci <- numeric(iter)
set.seed(seed)
for(i in 1:iter){
sample <- sample(edad.data$edad, n)
mean.est[i] <- mean(sample)
var.est[i] <- (1 - n/N) * (var(sample)/n)
lower.ci[i] <- mean.est[i] - qnorm(1 - alpha/2) * sqrt(var.est[i])
upper.ci[i] <- mean.est[i] + qnorm(1 - alpha/2) * sqrt(var.est[i])
}
return(data.frame(mean.est, lower.ci, upper.ci))
}
plot_ic <- function(df=NULL, mean.est.col = "green", ci_color = "blue", real_col = "red")
{
if(is.null(data))
{
stop("No se ha proporcionado un conjunto de datos.")
}
ggplot(df, aes(x = 1:iter, y = mean.est)) +
geom_point(colour = mean.est.col) +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = 0.1,
colour = ci_color) +
geom_hline(yintercept = mean(edad.data$edad), color = real_col) +
labs(title = "Intervalos de Confianza para la Media de la Edad",
x = "Iteración",
y = "Media") +
theme_minimal()
}
N <- nrow(edad.data)
n <- 20
iter <- 100
seed <- 1
df <- ic_estimation(edad.data, n, iter, seed)
#| label: fig:ic_n20
#| fig-cap: "IC al 95% para la media de la edad con tamaño de muestra 20."
colors <- c("#1E1E1E", "#4D6291", "#9C0824")
plot_ic(df, colors[1], colors[2], colors[3])
n <- 50
seed <- 2
iter <- 100
df <- ic_estimation(data = data, n = n, iter = iter, seed = seed)
n <- 50
seed <- 2
iter <- 100
df <- ic_estimation(data = edad.data, n = n, iter = iter, seed = seed)
#| label: fig:ic_n50
#| fig-cap: "IC al 95% para la media de la edad con tamaño de muestra 50."
colors <- c("#1E1E1E", "#4D6291", "#9C0824")
plot_ic(df, colors[1], colors[2], colors[3])
ceiling?
?
?
/
?cealing
??ceiling
data.floadings <- data.frame(x = c(0.781, 0.595, 0.792, 0.715,
0.389, 0.358, 0.830),
y = c(0.584, 0.663, 0.535, 0.568,
0.919, 0.534, 0.335),
name = c("estatura", "peso", "lpie",
"lbrazo", "anchoespalda", "dcraneo", "lrodtob"))
data.floadings
data.floadings <- data.frame(name = c("estatura", "peso", "lpie",
"lbrazo", "anchoespalda", "dcraneo", "lrodtob"),
x = c(0.781, 0.595, 0.792, 0.715,
0.389, 0.358, 0.830),
y = c(0.584, 0.663, 0.535, 0.568,
0.919, 0.534, 0.335))
data.floadings
data.floadings <- data.frame(name = c("estatura", "peso", "lpie",
"lbrazo", "anchoespalda", "dcraneo", "lrodtob"),
factor1 = c(0.781, 0.595, 0.792, 0.715,
0.389, 0.358, 0.830),
factor2 = c(0.584, 0.663, 0.535, 0.568,
0.919, 0.534, 0.335))
data.floadings
SSM.loadings <- apply(data.floadings[,2:3], 2, function(x) sum(x^2))
SSM.loadings
SSM.loadings <- apply(data.floadings[,2:3], 2, function(x) round(sum(x^2), 3))
SSM.loadings
SSM.loadings <- apply(data.floadings[,2:3], 2, function(x) round(sum(x^2), 4))
SSM.loadings
SSM.loadings <- apply(data.floadings[,2:3], 2, function(x) round(sum(x^2), 3))
SSM.loadings
total.var <- nrow(data.floadings) - 1
total.var <- nrow(data.floadings)
total.var
prop.var <- SSM.loadings / total.var
prop.var
prop.var <- round(SSM.loadings / total.var, 3)
prop.var
cum.prop.var <- cumsum(prop.var)
cum.prop.var
uniquiness <- 1 - SSM.loadings
uniquiness
SSM.loadings.variables <- apply(data.floadings[,2:3],
1, function(x) round(sum(x^2), 3))
SSM.loadings.variables
uniquiness <- 1 - SS.loadings.variables
uniquiness
SSM.loadings.variables <- apply(data.floadings[,2:3],
1, function(x) round(sum(x^2), 3))
SSM.loadings.variables
uniquiness <- 1 - SS.loadings.variables
uniquiness <- 1 - SSM.loadings.variables
uniquiness
data.floadings$uniquiness <- uniquiness
data.floadings
comunalities.total <- sum(SSM.loadings.variables)
comunalities.total
com.total.factors <- sum(SSM.loadings)
com.total.factors
setwd("~/Escritorio/especialidad_codes/multivariate/tarea1")
# Número de Datos faltantes
total_na <- sum(is.na(bienestar2022))
# Datos
bienestar2022 <- read.csv("bienestar2022.csv")
# Número de Datos faltantes
total_na <- sum(is.na(bienestar2022))
total_na
cat(paste("El número total de datos faltantes es: ", total_na, "\n"))
# Número de Datos faltantes por columna
na_por_columna <- colSums(is.na(bienestar2022))
cat("El número de datos faltantes por columna es: \n")
print(na_por_columna)
# Gráfico de barras
ggplot(data = bienestar2022, aes(x = names(na_por_columna), y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue")
# Número de Datos faltantes por columna
na_por_columna <- colSums(is.na(bienestar2022))
# Gráfico de barras
ggplot(data = bienestar2022, aes(x = names(na_por_columna), y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue")
# Librerias
library(ggplot2)
# Gráfico de barras
ggplot(data = bienestar2022, aes(x = names(na_por_columna), y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue")
# Número de Datos faltantes por columna
na_por_columna <- apply(bienestar2022, 2, function(x) sum(is.na(x)))
# Gráfico de barras
ggplot(data = bienestar2022, aes(x = names(na_por_columna), y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue")
na_por_columna <- data.frame(names = names(na_por_columna), na_por_columna)
View(na_por_columna)
# Gráfico de barras
ggplot(data = na_por_columna, aes(x = names, y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Número de datos faltantes por columna",
x = "Columnas",
y = "Número de datos faltantes") +
theme_minimal()
# Gráfico de barras
ggplot(data = na_por_columna, aes(x = names, y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Número de datos faltantes por columna",
x = "Columnas",
y = "Número de datos faltantes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 75, hjust = 1))
# Gráfico de barras
ggplot(data = na_por_columna, aes(x = names, y = na_por_columna)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Número de datos faltantes por variable",
x = "",
y = "Número de datos faltantes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 75, hjust = 1))
install.packages("mice")
# histograma
ggplot(bienestar2022, aes(x = Calidad.de.la.red.social.de.soporte)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Calidad.de.la.red.social.de.soporte (antes de imputación)")
######## Tarea 1
# Librerias
library(ggplot2)
library(mice)
# Datos
bienestar2022 <- read.csv("bienestar2022.csv")
# Número de Datos faltantes
total_na <- sum(is.na(bienestar2022))
cat(paste("El número total de datos faltantes es: ", total_na, "\n"))
# Número de Datos faltantes por columna
na_por_columna <- apply(bienestar2022, 2, function(x) sum(is.na(x)))
na_por_columna <- data.frame(names = names(na_por_columna), na_por_columna)
# Ahora vamos encontrar su fila y columna correspondiente para encontrar a qué estados pertenecen esos valores faltantes.
cat("Posiciones de los valores faltantes:\n")
na_positions <- which(is.na(bienestar2022), arr.ind = TRUE) # devuelve un arreglo, (fila columna)
# Crear el data frame donde aparecerá primero la fila del arreglo anterior (fila) seguido de la columna correspondiente (variable)
na_dataframe <- data.frame(Fila = na_positions[, 1], Columna = colnames(bienestar2022)[na_positions[, 2]])
# Imprimir las posiciones de los NA con el arreglo (Estado, variable)
print(na_dataframe)
# histograma
ggplot(bienestar2022, aes(x = Calidad.de.la.red.social.de.soporte)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Calidad.de.la.red.social.de.soporte (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Niveles.de.educacion)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Niveles.de.educacion (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Poblacion.ocupada.trabajando.mas.de.48.horas)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Poblacion.ocupada.trabajando.mas.de.48.horas (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Porcentaje.de.la.poblacion.en.situacion.de.pobreza.extrema)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Porcentaje.de.la.poblacion.en.situacion.de.pobreza.extrema (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Contaminacion.del.aire)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Contaminacion.del.aire (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Participacion.civica.y.politica)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Participacion.civica.y.politica (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Salud.autorreportada)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Salud.autorreportada (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos.)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos. (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Satisfaccion.con.la.vida)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Satisfaccion.con.la.vida (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Confianza.en.la.policia)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Confianza.en.la.policia (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Tasa.de.incidencia.delictiva)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Tasa.de.incidencia.delictiva (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Tasa.de.informalidad.laboral)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Tasa.de.informalidad.laboral (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Tasa.de.desocupacion)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Tasa.de.desocupacion (antes de imputación)")
# histograma
ggplot(bienestar2022, aes(x = Porcentaje.de.viviendas.con.techos.de.materiales.resistentes)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribución de Porcentaje.de.viviendas.con.techos.de.materiales.resistentes (antes de imputación)")
# Patrón de faltantes
md.pattern(bienestar2022)
# Imputación múltiple
imp <- mice(bienestar2022, seed=10, print= FALSE)
print(imp)
imp$imp$Calidad.de.la.red.social.de.soporte
imp$imp$Niveles.de.educacion
complete(imp)
completados <- complete(imp)
head(completados)
# Guardar los datos completos en formato CSV
write.csv(completados, file = "imputacion_completa.csv", row.names = TRUE)
#----------------- Comenzamos con los ejercicios de la sección 4 --------------
#-------------------------------------- ecdf ----------------------------------
# --Tasa de Obesidad
obesidad_ecdf <- ecdf(imputacion_completa$Tasa.de.obesidad)
# Ya que seleccionamos el código, ahora vamos a hacer que lo lea
imputacion_completa <- read.csv("imputacion_completa.csv")
# Vamos a ver si se logró hacer la imputación
total_na <- sum(is.na(imputacion_completa))
# Vamos a imprimirlos:
cat("El total de valores faltantes es:", total_na, "\n")
# Se logró :D
head(imputacion_completa)
#----------------- Comenzamos con los ejercicios de la sección 4 --------------
#-------------------------------------- ecdf ----------------------------------
# --Tasa de Obesidad
obesidad_ecdf <- ecdf(imputacion_completa$Tasa.de.obesidad)
plot(obesidad_ecdf,
main = "ecdf - Tasa de Obesidad",
xlab = "Tasa de Obesidad",
ylab = "Probabilidad",
col = "blue",
lwd = 2)
# Puntos
points(imputacion_completa$Tasa.de.obesidad, obesidad_ecdf(imputacion_completa$Tasa.de.obesidad), col = "black", pch = 19)
# --Tasa de mortalidad infantil
tdmi_ecdf <- ecdf(imputacion_completa$Tasa.de.mortalidad.infantil)
plot(tdmi_ecdf,
main = "ecdf - Tasa de mortalidad infantil",
xlab = "Tasa de mortalidad infantil",
ylab = "Probabilidad",
col = "gold",
lwd = 2)
# Puntos
points(imputacion_completa$Tasa.de.mortalidad.infantil, tdmi_ecdf(imputacion_completa$Tasa.de.mortalidad.infantil), col = "black", pch = 19)
# --Razón de mortalidad materna.
tdmm_ecdf <- ecdf(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos.)
plot(tdmm_ecdf,
main = "ecdf - Razón de mortalidad materna",
xlab = "Razón de mortalidad materna",
ylab = "Probabilidad",
col = "deeppink",
lwd = 2)
# Puntos
points(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos., tdmm_ecdf(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos.), col = "black", pch = 19)
# --Satisfacción con la vida
sclv_ecdf <- ecdf(imputacion_completa$Satisfaccion.con.la.vida)
plot(sclv_ecdf,
main = "ecdf - Satisfacción con la vida",
xlab = "Satisfacción con la vida",
ylab = "Probabilidad",
col = "green",
lwd = 2)
# Puntos
points(imputacion_completa$Satisfaccion.con.la.vida, sclv_ecdf(imputacion_completa$Satisfaccion.con.la.vida), col = "black", pch = 19)
viviendas_ecdf <- ecdf(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos)
plot(viviendas_ecdf,
main = "ecdf - Vivivendas con acceso a servicios básicos",
xlab = "Viviendas con acceso a servicios básicos",
ylab = "Probabilidad",
col = "indianred1",
lwd = 2)
# Puntos
points(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos, viviendas_ecdf(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos), col = "black", pch = 19)
boxplot(imputacion_completa$Tasa.de.obesidad,
main = "Boxplot - Tasa de Obesidad",
ylab = "Tasa de Obesidad",
col = "blue")
boxplot(imputacion_completa$Tasa.de.mortalidad.infantil,
main = "Boxplot - Tasa de Motarlidad infantil",
ylab = "Tasa de Mortalidad Infantil",
col = "gold")
boxplot(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos.,
main = "Boxplot - Razón de Mortalidad Materna",
ylab = "Razón de Mortalidad Materna",
col = "deeppink")
boxplot(imputacion_completa$Satisfaccion.con.la.vida,
main = "Boxplot - Satisfacción con la vida",
ylab = "Satisfacción con la vida",
col = "green")
boxplot(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos,
main = "Boxplot - Viviendas con acceso a servicios básicos",
ylab = "Viviendas con acceso a servicios básicos",
col = "indianred1")
#------------------------------ Normal -----------------------------------------
qqnorm(imputacion_completa$Tasa.de.obesidad, main = "QQ-Plot - Tasa de Obesidad")
qqline(imputacion_completa$Tasa.de.obesidad, col = "black")  # Línea de referencia
qqnorm(imputacion_completa$Tasa.de.obesidad,
main = "QQ-Plot - Tasa de Obesidad",
xlab = "Cuantiles teóricos",
ylab = "Cuantiles de Tasa de Obesidad",
col = "blue",
pch = 19)
qqline(imputacion_completa$Tasa.de.obesidad, col = "black", lwd = 2)
qqnorm(imputacion_completa$Tasa.de.mortalidad.infantil,
main = "QQ-Plot - Tasa de Mortaldiad Infantil",
xlab = "Cuantiles teóricos",
ylab = "Cuantiles de Tasa de Mortalidad Infantil",
col = "gold",
pch = 19)  # Cambiar el color y tipo de punto
qqline(imputacion_completa$Tasa.de.mortalidad.infantil, col = "black", lwd = 2)
qqnorm(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos.,
main = "QQ-Plot - Razón de Mortaldiad Materna",
xlab = "Cuantiles teóricos",
ylab = "Cuantiles de Razón de Mortalidad Materna",
col = "deeppink",
pch = 19)
qqline(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos., col = "black", lwd = 2)
qqnorm(imputacion_completa$Satisfaccion.con.la.vida,
main = "QQ-Plot - Satisfacción con la vida",
xlab = "Cuantiles teóricos",
ylab = "Cuantiles de Satisfacción con la vida",
col = "green",
pch = 19)
qqline(imputacion_completa$Satisfaccion.con.la.vida, col = "black", lwd = 2)
qqnorm(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos,
main = "QQ-Plot - Viviendas con acceso a servicios básicos",
xlab = "Cuantiles teóricos",
ylab = "Cuantiles de Viviendas con acceso a servicios básicos",
col = "indianred1",
pch = 19)
qqline(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos, col = "black", lwd = 2)
hist(imputacion_completa$Tasa.de.obesidad,
main = "Histograma - Tasa de Obesidad",
xlab = "Tasa de Obesidad",
ylab = "Frecuencia",
col = "blue",
border = "black")
hist(imputacion_completa$Tasa.de.mortalidad.infantil,
main = "Histograma - Tasa de Mortalidad Infantil",
xlab = "Tasa de Mortalidad Infantil",
ylab = "Frecuencia",
col = "gold",
border = "black")
hist(imputacion_completa$Razon.de.mortalidad.materna..defunciones.por.cada.100.mil.nacidos.vivos.,
main = "Histograma - Razón de Mortalidad Materna",
xlab = "Razón de Mortalidad Materna",
ylab = "Frecuencia",
col = "deeppink",
border = "black")
hist(imputacion_completa$Satisfaccion.con.la.vida,
main = "Histograma - Satisfacción con la vida",
xlab = "Satisfacción con la vida",
ylab = "Frecuencia",
col = "green",
border = "black")
hist(imputacion_completa$Viviendas.con.acceso.a.servicios.basicos,
main = "Histograma - Viviendas con acceso a servicios básicos",
xlab = "Viviendas con acceso a servicios básicos",
ylab = "Frecuencia",
col = "indianred1",
border = "black")
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
#----------------------- Ejercicio 5 ------------------------------------
| Variable | Estado | Obvs. Faltantes |
| Variable | Estado | Obvs. Faltantes |
